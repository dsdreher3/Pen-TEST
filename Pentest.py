# 
# 
# 

"""
This python program is a brief introduction into conducting a penetration test. The
program was created with the idea to be able to utilize the code in a Capture the
Flag (CTF) scenerio.  The code begins by asking if the user would like to conduct a
penetration test. If the user inputs yes the code then prompts for their current
host address and subnetmask in the default format of 192.168.1.1/24.  The program
will take in the ip address and subnetmask as an object and add it to a dictionary.
Lastly the code will output a unique nmap terminal command that is specific to the
ip address and subnetmask inputed by the user.
"""



import sys
import ipaddress                                                                            #Import needed modules
import re


def validateIp(ip):
    ipreg = re.compile(r'\d{1,3}.\d{1,3}.\d{1,3}.\d{1,3}/\d{1,2}')                          #Defining validateIp, ran through regular expression to confirm proper format
    mo = ipreg.search(ip)
    if mo:
        try:
            host = ipaddress.IPv4Network(ip, strict=False)                                  #Creates inserted host address into network address object
            database['network'] = host                                                      #Adds network address and subnetmask to database
            temp = ip.split('/')                                                            #Splits inserted host address between the host address and the subnetmask at the '/'
            database['host'] = ipaddress.ip_address(temp[0])                                #Creates host address object and adds the address and subnetmask to the database
            
            print('\n\nValid address submitted.')
            print('Host and network address documented.')
            return True
        except ipaddress.AddressValueError:
            print('Invalid host address')
            return False
        except ipaddress.NetmaskValueError:                                                 #Except statements listed to execute if try statement returns False as a way to sanitize inputs
            print('Invalid subnetmask')
            return False
    


def header():                                                                               #Defining header, ability to utilize later in code
    print(''.center(68,'='))
    print(''.center(68,'='))

    
database = {}                                                                               #Creates dictionary assigned to database variable

while True:
    header()
    print('   Would your like to conduct a penetration test?   '.center(68,'='))            #Start of program relies on users input
    header()

    print()
    start = input()
    

    if start.lower() == 'yes':                                                              #Sanitizes users input
        while True:
            print('\nPlease insert host address and subnetmask (ex.192.168.1.1/24)-\n')     #Executes until valid ip address and subnetmask is entered
            host = input()
            if validateIp(host):                                                            #Validates users input 
                print('\n\nRun: \n\nnmap -p 1-65535 -sV -sS -T4 ' + database['network'].with_prefixlen
                      + ' in kali terminal.\n')
                sys.exit()
            
        

    elif start.lower() == 'no':
        print('\nProgram Terminated...')
        sys.exit()                                                                          #Elif and else statements used if 'yes' is not inputed into the program

    else:
        print('\nPlease type YES or NO!\n')


"""
This penetration test tool can be expanded on in many ways to be more helpful to
the user.  I plan to expand this program by adding "help" functionalities that
will allow the user to strike a predefined key and give hints on where to find the
information to input into the code.  Ultimately, I would like my code to be able
to run itself with no input from the user along with any external scans needing to
be ran.  The code will also keep adding useful entries into the dictionary
(database) and be able to print the information as a readable log.
"""
